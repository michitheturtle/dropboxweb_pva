{"version":3,"file":"dropbox-api.service.js","sourceRoot":"","sources":["dropbox-api.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable, OnInit, provide} from '@angular/core';\nimport {Http, Response, Headers, RequestOptions, RequestMethod,ResponseContentType}  from '@angular/http';\n\nimport { Observable }     from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport {Dropboxfile} from \"./dropboxfile\";\nimport {PromiseObservable} from \"rxjs/observable/PromiseObservable\";\nimport {CustomBrowserXhr} from \"./CustomBrowserXhr\";\nimport {environment} from \"./environment\";\n\n@Injectable()\nexport class DropboxApiService {\n\n\n  api_list_folder: string = \"https://api.dropboxapi.com/2/files/list_folder\";\n  api_download: string = \"https://content.dropboxapi.com/2/files/download\";\n  token: string = \"4xSPY4ZBCIcAAAAAAAADy4-QvAuCWhHEtEGalxoZxjwZr5oUZsoFDE3xubxODn85\";\n  cursor: string = \"\";\n  hasmore:Boolean = false;\n  files: Dropboxfile[] = [];\n\n  constructor(private http : Http) {}\n\n  private getByCursor(){\n\n    let options = this.getHeader();\n\n    options.body = {cursor: this.cursor};\n\n   // this.http.request(this.api_list_folder + \"/continue\", options).flatMap\n\n\n    ///COPY\n   /* this.http.request(this.api_list_folder + \"/continue\", options).map(\n      val => {\n        this.files.concat(<Dropboxfile[]>val.json().entries);\n        this.hasmore = val.json().has_more;\n        this.cursor = val.json().cursor;\n\n        if(this.hasmore){\n          this.getByCursor();\n        }\n        else{\n          return this.files;\n        }\n      });*/\n\n  }\n\n  private getByFolderName(){\n\n    let options = this.getHeader();\n\n    options.body = {path: \"/Sabine\", recursive:true};\n\n    return this.http.request(this.api_list_folder, options).map(r => {return  r;});\n\n  }\n\n  getFiles (forFolder: string)  {\n\n    let options = this.getHeader();\n\n    options.body = {path: forFolder};\n\n    return this.http.request(this.api_list_folder, options).map(r => {return  r;});\n  };\n\n  download(file: Dropboxfile){\n\n    let options = this.getHeader();\n    options.headers.delete(\"Content-Type\");\n\n    //options.body = {path: file.path_lower};\n\n    let api_arg = {path: file.path_lower};\n\n    //Dropbox-API-Arg: {\"path\":\"\"}\n    //header.append(\"Content-Type\", \"application/json\");\n    options.headers.append(\"Dropbox-API-Arg\", JSON.stringify(api_arg) );\n\n\n\n    return this.http.request(this.api_download, options).map(r => {return r;});\n  }\n\n  downloadFile(file: Dropboxfile) {\n\n    let api_arg = {path: file.id};\n\n    //header\n    var options = this.getHeader();\n    options.headers.delete(\"Content-Type\");\n    options.headers.append(\"Dropbox-API-Arg\", JSON.stringify(api_arg));\n\n    options.responseType = ResponseContentType.Blob;\n\n    return this.http.post(this.api_download, null, options).map(response => {return response.blob()});\n  }\n\n  /*testfunktion(){\n\n\n    this.getFiles('/Sabine').subscribe(r => {\n\n\n      let options = this.getHeader();\n\n      //options.body = {path: forFolder};\n\n      let callAndMap = (cursr) => this.http.post(this.api_list_folder, {cursor: cursr}, options).map(res => {\n        this.cursor = res.json().cursor;\n        this.hasmore = res.json().has_more;\n        this.files.concat(<Dropboxfile[]>res.json().entries);\n      })\n      //let callAndMap = (pageNo) => call({page: pageNo}).map(res => {page: pageNo, data: res.json()});  // map, and save the page number for recursion later.\n\n      callAndMap(r.json().cursor)\n        .expand(obj => {(obj.json().has_more ? callAndMap(obj.json().cursor) : null)})\n        .map(obj => {\n          this.files.concat(<Dropboxfile[]>obj.json().entries);\n        })    // uncomment this line if you need to map back to original response json\n        .subscribe(callback);\n\n\n    });\n\n  }*/\n\n\n\nprivate getHeader(): RequestOptions{\n  let options = new RequestOptions();\n  options.method = RequestMethod.Post;\n\n\n  let header = new Headers();\n  header.append('Authorization', 'Bearer ' + environment.api_token);\n  header.append(\"Content-Type\", \"application/json\");\n\n  options.headers = header;\n\n  return options;\n}\n\n}\n"]}